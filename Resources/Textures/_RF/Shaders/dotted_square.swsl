uniform lowp vec4 color;
uniform highp vec2 point1;
uniform highp vec2 point2;
uniform highp vec2 point3;
uniform highp vec2 point4;
uniform highp float thickness;
uniform highp float dashLength;
uniform highp float gapLength;

void fragment() {
    highp vec2 px = FRAGCOORD.xy;

    highp float left = min(min(point1.x, point2.x), min(point3.x, point4.x));
    highp float right = max(max(point1.x, point2.x), max(point3.x, point4.x));
    highp float bottom = min(min(point1.y, point2.y), min(point3.y, point4.y));
    highp float top = max(max(point1.y, point2.y), max(point3.y, point4.y));

    highp float innerLeft = left + thickness;
    highp float innerRight = right - thickness;
    highp float innerTop = top - thickness;
    highp float innerBottom = bottom + thickness;

    bool inBorder = false;

    // Bottom border
    if (px.y >= bottom && px.y <= innerBottom &&
        px.x >= left && px.x <= right) {
        highp float position = px.x - left;
        inBorder = mod(position, dashLength + gapLength) < dashLength;
    }
    // Top border
    else if (px.y >= innerTop && px.y <= top &&
             px.x >= left && px.x <= right) {
        highp float position = px.x - left;
        inBorder = mod(position, dashLength + gapLength) < dashLength;
    }
    // Left border
    else if (px.x >= left && px.x <= innerLeft &&
             px.y >= bottom && px.y <= top) {
        highp float position = px.y - bottom;
        inBorder = mod(position, dashLength + gapLength) < dashLength;
    }
    // Right border
    else if (px.x >= innerRight && px.x <= right &&
             px.y >= bottom && px.y <= top) {
        highp float position = px.y - bottom;
        inBorder = mod(position, dashLength + gapLength) < dashLength;
    }

    COLOR = inBorder ? color : vec4(0.0, 0.0, 0.0, 0.0);
}
