using Content.Client._RF.NPC;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._RF.UserInterface.Controls;

[GenerateTypedNameReferences]
public sealed partial class PassiveTasksMenu : Control
{
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;

    private HotbarActionButton? _eraseButton;

    private NpcControlSystem _npcControl  = default!;

    private readonly Dictionary<string, HotbarActionButton> _buttons = new();

    public PassiveTasksMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void EnsureSetup()
    {
        _npcControl = _systemManager.GetEntitySystem<NpcControlSystem>();

        _npcControl.OnTaskData += UpdateList;
        _npcControl.OnUpdateSelectMode += UpdateButtons;

        UpdateList();
    }

    private void UpdateList()
    {
        Container.RemoveAllChildren();
        _buttons.Clear();

        _eraseButton = new HotbarActionButton
        {
            IconTexturePath = "/Textures/_RF/Interface/VerbIcons/eraser-solid.svg.192dpi.png",
            ToolTip = Loc.GetString("passive-tasks-menu-eraser-tooltip"),
            ToggleMode = true,
        };

        _eraseButton.OnToggled += args => _npcControl.SetEraser(args.Pressed);

        Container.AddChild(_eraseButton);

        foreach (var (id, task) in _npcControl.TasksData)
        {
            var button = new HotbarActionButton()
            {
                IconModulate = task.Color,
                ToolTip = $"{task.TaskName}\n{task.Description}".Trim(),
                ToggleMode = true,
            };

            if (task.IconPath != null)
                button.IconTexturePath = task.IconPath;

            button.OnToggled += args => _npcControl.SetSelectedTask(args.Pressed ? task.TaskId : null);
            _buttons.Add(id, button);
            Container.AddChild(button);
        }
    }

    private void UpdateButtons()
    {
        foreach (var (task, button) in _buttons)
        {
            button.SetPressed(task == _npcControl.SelectedTask?.TaskId);
        }

        _eraseButton?.SetPressed(_npcControl.Eraser);
    }
}

