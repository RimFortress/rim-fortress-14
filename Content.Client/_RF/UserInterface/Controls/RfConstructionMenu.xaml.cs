using System.Linq;
using System.Numerics;
using Content.Client._RF.Construction;
using Content.Client.Construction;
using Content.Shared.Construction.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Placement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Input.Binding;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client._RF.UserInterface.Controls;

[GenerateTypedNameReferences]
public sealed partial class RfConstructionMenu : Control
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPlacementManager _placement = default!;

    private SpriteSystem _sprite = default!;
    private ConstructionSystem _construction = default!;
    private CommonConstructionSystem _commonConstruction = default!;

    private readonly Dictionary<string, List<ConstructionPrototype>> _categories = new();
    private string? _selectedCategory;
    private bool _setup;
    private bool _erase;
    private ConstructionPrototype? _selectedPrototype;

    public RfConstructionMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        ItemList.Visible = false;
        Metadata.Visible = false;

        _placement.PlacementChanged += OnPlacementChanged;
        _prototype.PrototypesReloaded += args =>
        {
            if (!args.WasModified<ConstructionPrototype>())
                return;

            LoadPrototypes();
            BuildCategories();
            BuildItems();
        };

        Search.OnTextChanged += _ => BuildItems();
        BackButton.OnPressed += _ =>
        {
            _selectedCategory = null;
            BuildItems();

            CategoryList.Visible = true;
            ItemList.Visible = false;
            SearchBar.Visible = false;
            Metadata.Visible = false;
        };

        EraseButton.OnPressed += _ =>
        {
            _placement.Clear();

            if (!EraseButton.Pressed)
                return;

            _placement.ToggleEraserHijacked(new CommonConstructionPlacementHijack(_commonConstruction, null));
            _erase = true;
        };

        CloseButton.OnPressed += _ => Visible = false;
    }

    private void OnPlacementChanged(object? sender, EventArgs e)
    {
        if (_erase)
        {
            EraseButton.Pressed = false;
            _erase = false;
        }
    }

    private void OnGuideAvailable(object? sender, string id)
    {
        if (_selectedPrototype?.ID == id)
            BuildMetadata();
    }

    private void LoadPrototypes()
    {
        _categories.Clear();
        var prototypes = _prototype.EnumeratePrototypes<ConstructionPrototype>();
        foreach (var prototype in prototypes)
        {
            if (prototype.Hide || prototype.Type == ConstructionType.Item)
                continue;

            if (!_categories.ContainsKey(prototype.Category))
                _categories.Add(prototype.Category, new());

            _categories[prototype.Category].Add(prototype);
        }
    }

    public void EnsureSetup()
    {
        if (_setup)
            return;

        _sprite = _entityManager.System<SpriteSystem>();
        _construction = _entityManager.System<ConstructionSystem>();
        _commonConstruction = _entityManager.System<CommonConstructionSystem>();

        _construction.ConstructionGuideAvailable += OnGuideAvailable;

        LoadPrototypes();
        BuildCategories();

        _setup = true;
    }

    protected override void EnteredTree()
    {
        base.EnteredTree();

        CommandBinds.Builder
            .Bind(EngineKeyFunctions.EditorCancelPlace, new PointerInputCmdHandler(OnCancelPlace, outsidePrediction: true))
            .Register<RfConstructionMenu>();
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();
        CommandBinds.Unregister<RfConstructionMenu>();
    }

    private bool OnCancelPlace(in PointerInputCmdHandler.PointerInputCmdArgs args)
    {
        CloseButton.Pressed = false;
        return false;
    }

    private void BuildCategories()
    {
        var sortedCategories = _categories
            .OrderBy(c => c.Key);

        CategoryList.RemoveAllChildren();

        foreach (var (name, prototypes) in sortedCategories)
        {
            var textures = prototypes.First().Layers.Select(x => _sprite.Frame0(x)).ToList();
            var button = new ConstructionButton(name, textures);

            button.OnPressed += _ =>
            {
                MainScroll.SetScrollValue(Vector2.Zero);
                CategoryList.Visible = false;
                ItemList.Visible = true;
                SearchBar.Visible = true;

                _selectedCategory = name;
                BuildItems();
            };

            CategoryList.AddChild(button);
        }
    }

    private void BuildItems()
    {
        ItemList.RemoveAllChildren();

        if (_selectedCategory == null
            || !_categories.TryGetValue(_selectedCategory, out var prototypes))
            return;

        foreach (var prototype in prototypes)
        {
            if (!string.IsNullOrEmpty(Search.Text)
                && !prototype.Name.Contains(Search.Text))
                continue;

            var button = new ConstructionButton(prototype);
            button.ToggleMode = true;

            button.OnPressed += _ =>
            {
                _selectedPrototype = prototype;
                Metadata.Visible = true;
                EraseButton.Pressed = false;
                _erase = false;
                button.Pressed = false;

                BuildMetadata();
            };

            ItemList.AddChild(button);
        }
    }

    private void BuildMetadata()
    {
        if (_selectedPrototype == null)
            return;

        MetaTexture.Textures = _selectedPrototype.Layers.Select(x => _sprite.Frame0(x)).ToList();
        MetaName.Text = _selectedPrototype.Name;
        MetaDescription.TextRope = new Rope.Leaf(_selectedPrototype.Description);
        StepList.Clear();

        if (_construction.GetGuide(_selectedPrototype) is not { } guide)
            return;

        foreach (var entry in guide.Entries)
        {
            var text = entry.Arguments != null
                ? Loc.GetString(entry.Localization, entry.Arguments)
                : Loc.GetString(entry.Localization);

            if (entry.EntryNumber is { } number)
            {
                text = Loc.GetString("construction-presenter-step-wrapper",
                    ("step-number", number),
                    ("text", text));
            }

            // The padding needs to be applied regardless of text length... (See PadLeft documentation)
            text = text.PadLeft(text.Length + entry.Padding);

            var icon = entry.Icon != null ? _sprite.Frame0(entry.Icon) : Texture.Transparent;
            StepList.AddItem(text, icon, false);
        }
    }
}
