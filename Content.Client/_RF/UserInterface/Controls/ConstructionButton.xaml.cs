using System.Linq;
using Content.Client._RF.Construction;
using Content.Shared.Construction.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.Placement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Enums;

namespace Content.Client._RF.UserInterface.Controls;

[GenerateTypedNameReferences]
public sealed partial class ConstructionButton : Button
{
    [Dependency] private readonly IPlacementManager _placement = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly ILocalizationManager _locale = default!;

    public ConstructionButton(ConstructionPrototype prototype)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var sprite = _entityManager.System<SpriteSystem>();

        Label.Text = _locale.TryGetString(prototype.Name, out var locName) ? locName : prototype.Name;
        Texture.Textures = prototype.Layers.Select(x => sprite.Frame0(x)).ToList();

        OnPressed += _ =>
        {
            if (_placement.IsActive)
                _placement.Clear();

            _placement.BeginPlacing(
                new PlacementInformation { IsTile = false, PlacementOption = prototype.PlacementMode },
                new CommonConstructionPlacementHijack(_entityManager.System<CommonConstructionSystem>(), prototype));
        };

        OnMouseEntered += _ =>
        {
            TopLine.Visible = true;
            BottomLine.Visible = true;
        };

        OnMouseExited += _ =>
        {
            TopLine.Visible = false;
            BottomLine.Visible = false;
        };
    }

    public ConstructionButton(string name, List<Texture> textures)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Label.Text = _locale.TryGetString(name, out var locName) ? locName : name;
        Texture.Textures = textures;

        OnMouseEntered += _ =>
        {
            TopLine.Visible = true;
            BottomLine.Visible = true;
        };

        OnMouseExited += _ =>
        {
            TopLine.Visible = false;
            BottomLine.Visible = false;
        };
    }
}

