using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared._RF.World;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._RF.World.UI;

[GenerateTypedNameReferences]
public sealed partial class WorldMapWindow : FancyWindow
{
    [Dependency] private readonly IUserInterfaceManager _ui = default!;
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    public WorldMapWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var factionWindow = _ui.CreateWindow<FactionColorWindow>();

        var world = _entity.System<SharedRimFortressWorldSystem>();

        factionWindow.Selector.OnColorChanged += color =>
        {
            if (_player.LocalEntity is not { } uid)
                return;

            ColorPanel.PanelOverride = new StyleBoxFlat(color);
            world.SetPlayerFactionColor(uid, color);
        };

        OnResized += () => WorldMap.SetSize = Size - new Vector2(0, Header.Height + 30);

        FactionColorButton.OnPressed += _ =>
        {
            if (factionWindow.IsOpen)
                factionWindow.Close();
            else
                factionWindow.Open(FactionColorButton.GlobalPosition + new Vector2(0, 50f));
        };
    }

    public void Set(EntityUid? mapUid)
    {
        WorldMap.MapUid = mapUid;
        WorldMap.UpdateMap();

        if (_entity.TryGetComponent(_player.LocalEntity, out RimFortressPlayerComponent? player))
            ColorPanel.PanelOverride = new StyleBoxFlat(player.FactionColor);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        Coordinates.Text = $"{(Vector2i) WorldMap.MousePos()}";
    }
}

