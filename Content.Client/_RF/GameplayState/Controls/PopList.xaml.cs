using System.Linq;
using Content.Client._RF.NPC;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._RF.GameplayState.Controls;

[GenerateTypedNameReferences]
public sealed partial class PopList : UIWidget
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private readonly Dictionary<EntityUid, PopIcon> _icons = new();

    public PopList()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void SetPops(List<EntityUid> pops)
    {
        Icons.RemoveAllChildren();

        foreach (var uid in pops)
        {
            if (_icons.ContainsKey(uid))
                continue;

            _entityManager.TryGetComponent(uid, out MetaDataComponent? meta);

            var icon = new PopIcon(uid, meta?.EntityName.Split(" ").First());
            _icons.Add(uid, icon);
            Icons.AddChild(icon);
        }
    }

    public void UpdateSelected()
    {
        var control = _entityManager.System<NpcControlSystem>();
        foreach (var (uid, icon) in _icons)
        {
            icon.Pressed = control.Selected.Contains(uid);
            icon.SetMarkerColor(control.Tasks.TryGetValue(uid, out var task) ? task.Color : Color.Transparent);
        }
    }
}

