using Content.Client._RF.NPC;
using Content.Shared.Follower;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._RF.GameplayState.Controls;

[GenerateTypedNameReferences]
public sealed partial class PopIcon : Control
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IGameTiming _timing = default!;
    [Dependency] private readonly IEntityNetworkManager _net = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    public bool Pressed { get => Button.Pressed; set => Button.Pressed = value; }

    private TimeSpan _lastClicked;

    public PopIcon()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Button.OnToggled += OnButtonToggled;
    }

    public PopIcon(EntityUid uid)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Icon.OverrideDirection = Direction.South;
        Icon.SetEntity(uid);

        Button.OnToggled += OnButtonToggled;
    }

    private void OnButtonToggled(BaseButton.ButtonEventArgs args)
    {
        if (Icon.Entity is not { } uid)
            return;

        var time = _timing.CurTime;

        if (_lastClicked > time - TimeSpan.FromSeconds(0.333)
            && _player.LocalEntity is { } entity)
        {
            Pressed = true;

            // THIS IS HORRIBLE,
            // but we can't work properly with the FollowerSystem on the client
            // and have to send the message to the server
            _net.SendSystemNetworkMessage(new FollowEntityRequest
            {
                Follower = _entityManager.GetNetEntity(entity),
                Entity = _entityManager.GetNetEntity(uid),
            });
        }

        _lastClicked = time;

        var control = _entityManager.System<NpcControlSystem>();

        if (Pressed)
            control.Selected.Add(uid);
        else
            control.Selected.Remove(uid);
    }

    public void SetMarkerColor(Color color)
    {
        Marker.PanelOverride = new StyleBoxFlat { BackgroundColor = color };
    }
}

