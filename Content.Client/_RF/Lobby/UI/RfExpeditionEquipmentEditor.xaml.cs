using Content.Client.Resources;
using Content.Shared._RF.Preferences;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;

namespace Content.Client._RF.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class RfExpeditionEquipmentEditor : Control
{
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly ILocalizationManager _locManager = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;

    private bool _isDirty;
    private int _pointsUsed;
    private ExpeditionEquipmentPrototype? _selectedCategory;
    private readonly Dictionary<EntProtoId, int> _costs = new();
    private readonly Dictionary<EntProtoId, int> _itemsSelected = new();
    private readonly Dictionary<EntProtoId, ExpeditionItemButton> _buttons = new();

    public bool IsDirty
    {
        get => _isDirty;
        set
        {
            _isDirty = value;

            SaveButton.Disabled = !value;
            ResetButton.Disabled = !value;
        }
    }

    public RfExpeditionEquipmentEditor()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        var panelTex = _resourceCache.GetTexture("/Textures/Interface/Nano/button.svg.96dpi.png");
        var back = new StyleBoxTexture
        {
            Texture = panelTex,
            Modulate = new Color(37, 37, 42)
        };

        back.SetPatchMargin(StyleBox.Margin.All, 10);
        BackgroundPanel.PanelOverride = back;
    }

    public void BuildList()
    {
        _costs.Clear();
        _itemsSelected.Clear();
        _selectedCategory = null;
        IsDirty = false;
        CategoryBox.RemoveAllChildren();

        PointsLabel.Text =
            $"{Loc.GetString("expedition-equipment-editor-points-left")}: {_cfg.GetCVar(CCVars.RoundstartEquipmentPoints)}";

        var prototypes = _protoManager.EnumeratePrototypes<ExpeditionEquipmentPrototype>();
        var categoryGroup = new ButtonGroup();

        foreach (var proto in prototypes)
        {
            if (proto.Hidden)
                continue;

            foreach (var (entProto, cost) in proto.Items)
            {
                _costs.Add(entProto, cost);
            }

            var name = _locManager.TryGetString(proto.Name, out var locName) ? locName : proto.Name;
            var categoryButton = new Button
            {
                Group = categoryGroup,
                HorizontalExpand = true,
                Text = $"{name} ({proto.Items.Count})",
            };

            categoryButton.OnPressed += _ =>
            {
                _selectedCategory = proto;
                BuildItems();
            };

            categoryButton.AddStyleClass("ButtonBig");
            CategoryBox.AddChild(categoryButton);
        }
    }

    private void BuildItems()
    {
        ItemBox.RemoveAllChildren();
        _buttons.Clear();

        if (_selectedCategory == null)
            return;

        var maxPoints = _cfg.GetCVar(CCVars.RoundstartEquipmentPoints);
        
        foreach (var (proto, cost) in _selectedCategory.Items)
        {
            var count = _itemsSelected.GetValueOrDefault(proto, 0);
            var itemButton = new ExpeditionItemButton(proto, cost, count);
            itemButton.Plus.Disabled = cost + _pointsUsed > maxPoints;

            itemButton.OnCountSet += args =>
            {
                _itemsSelected[proto] = args;
                Recount();
            };

            _buttons.Add(proto, itemButton);
            ItemBox.AddChild(itemButton);
        }
    }

    private void Recount()
    {
        var oldPoints = _pointsUsed;
        _pointsUsed = 0;

        var maxPoints = _cfg.GetCVar(CCVars.RoundstartEquipmentPoints);

        foreach (var (proto, cost) in _costs)
        {
            if (!_itemsSelected.TryGetValue(proto, out var count))
                continue;

            _pointsUsed += count * cost;
        }

        foreach (var (proto, button) in _buttons)
        {
            if (!_costs.TryGetValue(proto, out var cost))
                continue;

            button.Plus.Disabled = cost + _pointsUsed > maxPoints;
        }

        PointsLabel.Text =
            $"{Loc.GetString("expedition-equipment-editor-points-left")}: {maxPoints - _pointsUsed}";

        if (oldPoints != _pointsUsed)
            IsDirty = true;
    }
}

