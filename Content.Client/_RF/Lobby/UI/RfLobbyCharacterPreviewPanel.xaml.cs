using System.Numerics;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._RF.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class RfLobbyCharacterPreviewPanel : Control
{
    [Dependency] private readonly IEntityManager _entManager = default!;

    public Button CharacterSetupButton => CharacterSetup;

    private readonly List<EntityUid> _previewDummies = new();

    public RfLobbyCharacterPreviewPanel()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetLoaded(bool value)
    {
        Loaded.Visible = value;
        Unloaded.Visible = !value;
    }

    public void SetProfiles(Dictionary<EntityUid, string> entities)
    {
        foreach (var dummy in _previewDummies)
        {
            _entManager.DeleteEntity(dummy);
        }

        _previewDummies.Clear();
        ViewBox.RemoveAllChildren();

        foreach (var (uid, name) in entities)
        {
            _previewDummies.Add(uid);
            var box = new BoxContainer
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical,
                Margin = new Thickness(3f, 0),
                VerticalExpand = true,
            };

            var label = new Label
            {
                Text = name,
                ClipText = true,
                Align = Label.AlignMode.Center,
            };

            var spriteView = new SpriteView
            {
                OverrideDirection = Direction.South,
                Scale = new Vector2(4f, 4f),
                MaxSize = new Vector2(112, 112),
                Stretch = SpriteView.StretchMode.Fill,
                VerticalExpand = true,
            };

            spriteView.SetEntity(uid);

            box.AddChild(spriteView);
            box.AddChild(label);
            ViewBox.AddChild(box);
        }
    }

    protected override void ExitedTree()
    {
        base.ExitedTree();

        foreach (var dummy in _previewDummies)
        {
            _entManager.DeleteEntity(dummy);
        }

        _previewDummies.Clear();
    }
}
