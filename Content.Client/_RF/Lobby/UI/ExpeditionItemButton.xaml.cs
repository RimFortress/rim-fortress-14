using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._RF.Lobby.UI;

[GenerateTypedNameReferences]
public sealed partial class ExpeditionItemButton : Control
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;
    [Dependency] private readonly ILocalizationManager _locManager = default!;

    public event Action<(int Old, int New)>? OnPointsSet;

    private int _count;

    public int Count
    {
        get => _count;
        set
        {
            _count = value;
            CountLine.Text = $"{Count}";
            Minus.Disabled = Count <= 0;
        }
    }
    public int Cost { get; private set; }

    public ExpeditionItemButton(EntProtoId protoId, int cost, int count)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Count = count;
        Cost = cost;

        if (!_protoManager.TryIndex(protoId, out var proto))
            return;

        var spriteSys = _entManager.System<SpriteSystem>();
        Texture.Texture = spriteSys.Frame0(proto);

        NameLabel.Text = proto.Name;
        Button.ToolTip = proto.Description;
        CostLabel.Text = $"{_locManager.GetString("expedition-equipment-editor-points")}: {Cost}";
        Minus.Disabled = Count == 0;

        Plus.OnPressed += _ =>
        {
            Count++;
            OnPointsSet?.Invoke(((Count - 1) * Cost, Count * Cost));
        };

        Minus.OnPressed += _ =>
        {
            Count--;
            OnPointsSet?.Invoke(((Count + 1) * Cost, Count * Cost));
        };

        CountLine.OnTextChanged += _ =>
        {
            var oldCount = Count;
            Count = int.TryParse(CountLine.Text, out var value) ? value : 0;
            OnPointsSet?.Invoke((oldCount * Cost, Count * Cost));
        };
    }
}

